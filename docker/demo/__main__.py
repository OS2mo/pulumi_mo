# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from pathlib import Path
from typing import Any
from csv import DictReader
from csv import unix_dialect

from more_itertools import one
from pulumi import Config
from pulumi import Output

from pulumi_mo.autogenerated_graphql_client.input_types import FacetFilter
from pulumi_mo.base import create_graphql_client_from_config
from pulumi_mo.clazz import Class
from pulumi_mo.clazz import ClassArgs
from pulumi_mo.itsystem import ITSystem
from pulumi_mo.itsystem import ITSystemArgs
from pulumi_mo.ituser import ITUser
from pulumi_mo.ituser import ITUserArgs
from pulumi_mo.person import Person
from pulumi_mo.person import PersonArgs
from pulumi_mo.rolebinding import RoleBinding
from pulumi_mo.rolebinding import RoleBindingArgs


def read_csv(file: Path) -> list[dict[str, Any]]:
    dialect = unix_dialect
    dialect.delimiter = ";"

    rows = []
    with open(file) as csvfile:
        reader = DictReader(csvfile, dialect=dialect)
        for row in reader:
            rows.append(row)
    return rows


def string2identifier(string: str) -> str:
    return string.casefold().strip().replace(" ", "_")


def user2identifier(user: dict[str, Any]) -> str | None:
    given_name = user["Firstname"].strip()
    surname = user["Lastname"].strip()
    if given_name == "" or surname == "":
        return None
    full_name = " ".join([given_name, surname])
    return string2identifier(full_name)


def role2identifier(itsystem_name: str, role_name: str) -> str:
    fully_qualified_role = " ".join([itsystem_name, role_name])
    return string2identifier(fully_qualified_role)


def ituser2identifier(itsystem_name: str, username: str) -> str:
    fully_qualified_username = " ".join([itsystem_name, username])
    return string2identifier(fully_qualified_username)


def rolebinding2identifier(itsystem_name: str, username: str, role: str) -> str:
    fully_qualified_rolebinding = " ".join([itsystem_name, username, role])
    return string2identifier(fully_qualified_rolebinding)


def fetch_role_facet() -> str:
    graphql_client = create_graphql_client_from_config(Config())
    with graphql_client as session:
        result = session._testing_facet_read(filter=FacetFilter(user_keys=["role"]))
        facet = one(result.objects)
        return str(facet.uuid)


role_id = Output.from_input(fetch_role_facet())


cwd = Path("/opt/data")
folders = [x for x in cwd.iterdir() if x.is_dir()]


user_map = {}
for folder in folders:
    groups = folder / "groups.csv"
    users = folder / "users.csv"

    for user in read_csv(users):
        identifier = user2identifier(user)
        if identifier is None:
            print("Unable to create user", user)
            continue
        if identifier in user_map:
            continue
        given_name = user["Firstname"].strip()
        surname = user["Lastname"].strip()
        user_map[identifier] = Person(identifier, PersonArgs(given_name, surname))

    itsystem_name = str(folder).removeprefix("/opt/data/")
    itsystem = ITSystem(itsystem_name, ITSystemArgs(itsystem_name))

    role_map = {}
    for role in read_csv(groups):
        role_name = role["Groupname"]
        role_identifier = role2identifier(itsystem_name, role_name)
        role_map[role_identifier] = Class(role_identifier, ClassArgs(role_identifier, name=role_name, facet=role_id, itsystem=itsystem.id))

    for user in read_csv(users):
        identifier = user2identifier(user)
        person = user_map.get(identifier)
        if person is None:
            continue

        username = user["Username"]
        ituser_identifier = ituser2identifier(itsystem_name, username)
        ituser = ITUser(ituser_identifier, ITUserArgs(username, person.id, itsystem.id))

        groups = set(user["Groups"].split(","))
        groups.discard("")
        for group in groups:
            role_identifier = role2identifier(itsystem_name, group)
            role = role_map[role_identifier]

            rolebinding_identifier = rolebinding2identifier(itsystem_name, username, group)
            RoleBinding(rolebinding_identifier, RoleBindingArgs(rolebinding_identifier, ituser.id, role.id))
