# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from typing import Any
from uuid import UUID

from more_itertools import only
from pulumi import Input
from pulumi import ResourceOptions
from pulumi.dynamic import CheckFailure
from pulumi.dynamic import CheckResult
from pulumi.dynamic import ConfigureRequest
from pulumi.dynamic import CreateResult
from pulumi.dynamic import ReadResult
from pulumi.dynamic import Resource
from pulumi.dynamic import ResourceProvider
from pulumi.dynamic import UpdateResult
from pydantic import parse_obj_as

from .autogenerated_graphql_client.base_model import BaseModel
from .autogenerated_graphql_client.client import GraphQLClient
from .autogenerated_graphql_client.input_types import ITSystemCreateInput
from .autogenerated_graphql_client.input_types import ITSystemFilter
from .autogenerated_graphql_client.input_types import ITSystemUpdateInput
from .base import create_graphql_client_from_config

DEFAULT_VALIDITY = {"from": "1970-01-01T00:00:00Z"}


class ITSystemProvider(ResourceProvider):
    session: GraphQLClient

    def configure(self, req: ConfigureRequest) -> None:
        graphql_client = create_graphql_client_from_config(req.config)
        session = graphql_client.__enter__()
        self.session = session

    def __del__(self) -> None:
        if hasattr(self, "session") and self.session:
            self.session.__exit__(None, None, None)

    def check(self, _olds: dict[str, Any], news: dict[str, Any]) -> CheckResult:
        failures: list[CheckFailure] = []
        if "user_key" not in news or news["user_key"] == "":
            failures.append(
                CheckFailure(
                    "user_key",
                    reason="Attribute cannot be the empty string",
                )
            )
        if "name" in news and news["name"] == "":
            failures.append(
                CheckFailure(
                    "name",
                    reason="Attribute cannot be the empty string",
                )
            )
        return CheckResult(self.transform(news), failures)

    def transform(self, news: dict[str, Any]) -> dict[str, Any]:
        name = news.get("name", news["user_key"].capitalize())
        return {**news, "name": name}

    def _read_by_filter(self, filter: dict[str, Any]) -> dict[str, Any] | None:
        result = self.session.itsystem_read(filter=parse_obj_as(ITSystemFilter, filter))
        entity = only(result.objects)
        if entity is None or entity.current is None:
            return None
        current = entity.current
        assert isinstance(current, BaseModel)
        return current.dict()

    def _read_by_uuid(self, uuid: UUID) -> dict[str, Any] | None:
        return self._read_by_filter({"uuids": [str(uuid)]})

    def read(self, id: str, props: dict[str, Any]) -> ReadResult:
        uuid = UUID(id)
        result = self._read_by_uuid(uuid)
        if result is None:
            return ReadResult(None, None)
        return ReadResult(id, result)

    def create(self, props: dict[str, Any]) -> CreateResult:
        result = self.session.itsystem_create(
            input=parse_obj_as(
                ITSystemCreateInput, {**props, "validity": DEFAULT_VALIDITY}
            )
        )
        return CreateResult(str(result.uuid), {**props})

    def update(
        self, id: str, _olds: dict[str, Any], props: dict[str, Any]
    ) -> UpdateResult:
        uuid = UUID(id)
        self.session.itsystem_update(
            input=parse_obj_as(
                ITSystemUpdateInput,
                {**props, "uuid": uuid, "validity": DEFAULT_VALIDITY},
            )
        )
        return UpdateResult({**props})

    def delete(self, id: str, props: dict[str, Any]) -> None:
        uuid = UUID(id)
        self.session.itsystem_delete(uuid=uuid)


class ITSystemArgs:
    user_key: Input[str]
    name: Input[str] | None

    def __init__(self, user_key: str, name: str | None = None) -> None:
        self.user_key = user_key
        self.name = name


class ITSystem(Resource, name="ITSystem"):
    def __init__(
        self, name: str, args: ITSystemArgs, opts: ResourceOptions | None = None
    ) -> None:
        full_args = {"user_key": None, "name": None, **vars(args)}
        super().__init__(ITSystemProvider(), name, full_args, opts)
