# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from collections.abc import Callable
from typing import Any
from uuid import UUID

from pulumi import Input
from pulumi import ResourceOptions
from pulumi.dynamic import CheckFailure
from pulumi.dynamic import CheckResult
from pulumi.dynamic import Resource
from pulumi.dynamic import UpdateResult
from pydantic import parse_obj_as

from .autogenerated_graphql_client.base_model import BaseModel
from .autogenerated_graphql_client.input_types import EmployeeCreateInput
from .autogenerated_graphql_client.input_types import EmployeeFilter
from .autogenerated_graphql_client.input_types import EmployeeUpdateInput
from .base import AbstractMOGraphQLProvider

DEFAULT_VALIDITY = {"from": "1970-01-01T00:00:00Z"}


class PersonProvider(AbstractMOGraphQLProvider):
    def check(self, _olds: dict[str, Any], news: dict[str, Any]) -> CheckResult:
        failures: list[CheckFailure] = []
        for attribute in ["given_name", "surname"]:
            if attribute not in news or news[attribute] == "":
                failures.append(
                    CheckFailure(
                        attribute,
                        reason="Attribute cannot be the empty string",
                    )
                )

        return CheckResult(news, failures)

    @property
    def read_method(self) -> Callable:
        return self.session.person_read

    @property
    def read_filter_model(self) -> type[BaseModel]:
        return EmployeeFilter

    @property
    def create_method(self) -> Callable:
        return self.session.person_create

    @property
    def create_input_model(self) -> type[BaseModel]:
        return EmployeeCreateInput

    def update(
        self, id: str, _olds: dict[str, Any], props: dict[str, Any]
    ) -> UpdateResult:
        uuid = UUID(id)
        self.session.person_update(
            input=parse_obj_as(
                EmployeeUpdateInput,
                {**props, "uuid": uuid, "validity": DEFAULT_VALIDITY},
            )
        )
        return UpdateResult({**props})

    def delete(self, id: str, props: dict[str, Any]) -> None:
        uuid = UUID(id)
        self.session.person_delete(uuid=uuid)


class PersonArgs:
    given_name: Input[str]
    surname: Input[str]

    def __init__(self, given_name: str, surname: str) -> None:
        self.given_name = given_name
        self.surname = surname


class Person(Resource, name="Person"):
    def __init__(
        self, name: str, args: PersonArgs, opts: ResourceOptions | None = None
    ):
        full_args = {"given_name": None, "surname": None, **vars(args)}
        super().__init__(PersonProvider(), name, full_args, opts)
