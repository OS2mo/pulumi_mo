# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from authlib.integrations.httpx_client import OAuth2Client

from .autogenerated_graphql_client.client import GraphQLClient


def create_graphql_client(
    mora_base: str, client_id: str, client_secret: str, auth_server: str | None = None
) -> GraphQLClient:
    auth_server = auth_server or (mora_base + "/auth/")
    auth_realm = "mo"
    timeout = 60
    graphql_version = 25

    oauth_client = OAuth2Client(
        base_url=mora_base,
        client_id=client_id,
        client_secret=client_secret,
        grant_type="client_credentials",
        # TODO: We should take a full token URL instead of hard-coding Keycloak's
        # URL scheme. Let's wait until the legacy clients are removed.
        token_endpoint=f"{auth_server}/realms/{auth_realm}/protocol/openid-connect/token",
        # TODO (https://github.com/lepture/authlib/issues/531): Hack to enable
        # automatic fetching of token on first call, instead of only refreshing.
        token={"expires_at": -1, "access_token": ""},
        timeout=timeout,
    )
    graphql_client = GraphQLClient(
        url=f"{mora_base}/graphql/v{graphql_version}", http_client=oauth_client
    )
    return graphql_client
