# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0

import pytest
from more_itertools import one
from pulumi.automation import ConfigMap

from pulumi_mo.autogenerated_graphql_client.client import GraphQLClient
from pulumi_mo.autogenerated_graphql_client.input_types import EmployeeFilter

from .conftest import StackBuilder


@pytest.mark.integration_test
def test_person(
    stack_builder: StackBuilder,
    mo_config_map: ConfigMap,
    graphql_client: GraphQLClient,
) -> None:
    result = graphql_client.person_read(filter=EmployeeFilter())
    assert result.objects == []

    def pulumi_program() -> None:
        from pulumi_mo.person import Person
        from pulumi_mo.person import PersonArgs

        Person("alya", PersonArgs("Alya", "Shadowsong"))

    with stack_builder(pulumi_program) as stack:
        stack.set_all_config(mo_config_map)

        up_res = stack.up()
        assert len(up_res.outputs) == 0
        assert up_res.summary.kind == "update"
        assert up_res.summary.result == "succeeded"

        result = graphql_client.person_read(filter=EmployeeFilter())
        alya = one(result.objects).current
        assert alya is not None
        assert alya.dict() == {"given_name": "Alya", "surname": "Shadowsong"}

        destroy_res = stack.destroy()
        assert destroy_res.summary.kind == "destroy"
        assert destroy_res.summary.result == "succeeded"

        result = graphql_client.person_read(filter=EmployeeFilter())
        assert result.objects == []
