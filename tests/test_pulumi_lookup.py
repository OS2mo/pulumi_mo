# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from uuid import UUID

import pytest
from more_itertools import one
from pulumi.automation import ConfigMap
from pulumi.automation import ConfigValue

from pulumi_mo.autogenerated_graphql_client.client import GraphQLClient

from .conftest import StackBuilder


@pytest.fixture
def mo_config_map(
    mo_url: str, mo_client_id: str, mo_client_secret: str, mo_auth_server: str | None
) -> ConfigMap:
    config: ConfigMap = {
        "mora_base": ConfigValue(value=mo_url),
        "mora_client_id": ConfigValue(value=mo_client_id),
        "mora_client_secret": ConfigValue(value=mo_client_secret, secret=True),
    }
    if mo_auth_server:
        config["mora_auth_server"] = ConfigValue(value=mo_auth_server)
    return config


@pytest.mark.integration_test
def test_mo_fetch(
    stack_builder: StackBuilder,
    mo_config_map: ConfigMap,
    graphql_client: GraphQLClient,
) -> None:
    def pulumi_program() -> None:
        from pulumi import Config
        from pulumi import Output
        from pulumi import export

        from pulumi_mo.base import create_graphql_client_from_config

        def fetch_actor_uuid() -> str:
            graphql_client = create_graphql_client_from_config(Config())
            with graphql_client as session:
                result = session.who_am_i()
                return str(result.actor.uuid)

        export("actor_uuid", Output.from_input(fetch_actor_uuid()))

    result = graphql_client.who_am_i()
    expected = result.actor.uuid
    assert isinstance(expected, UUID)

    with stack_builder(pulumi_program) as stack:
        stack.set_all_config(mo_config_map)

        up_res = stack.up()
        assert up_res.summary.kind == "update"
        assert up_res.summary.result == "succeeded"

        key, output = one(up_res.outputs.items())
        assert key == "actor_uuid"
        assert output.value == str(expected)
        assert output.secret is False
