# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from unittest.mock import ANY
from uuid import UUID

import pytest
from more_itertools import one
from pulumi.automation import ConfigMap
from pulumi.urn import _parse_urn as parse_urn

from pulumi_mo.autogenerated_graphql_client.client import GraphQLClient
from pulumi_mo.autogenerated_graphql_client.input_types import ClassFilter
from pulumi_mo.autogenerated_graphql_client.input_types import FacetFilter

from .conftest import StackBuilder


@pytest.mark.integration_test
def test_class(
    stack_builder: StackBuilder,
    mo_config_map: ConfigMap,
    graphql_client: GraphQLClient,
) -> None:
    result = graphql_client.class_read(
        filter=ClassFilter(facet=FacetFilter(user_keys=["role"]))
    )
    assert result.objects == []

    def pulumi_program() -> None:
        from more_itertools import one
        from pulumi import Config
        from pulumi import Output

        from pulumi_mo.autogenerated_graphql_client.input_types import FacetFilter
        from pulumi_mo.base import create_graphql_client_from_config
        from pulumi_mo.clazz import Class
        from pulumi_mo.clazz import ClassArgs

        def fetch_role_facet() -> str:
            graphql_client = create_graphql_client_from_config(Config())
            with graphql_client as session:
                result = session._testing_facet_read(
                    filter=FacetFilter(user_keys=["role"])
                )
                facet = one(result.objects)
                return str(facet.uuid)

        role_id = Output.from_input(fetch_role_facet())
        Class("admin", ClassArgs("admin", facet=role_id))

    with stack_builder(pulumi_program) as stack:
        stack.set_all_config(mo_config_map)

        up_res = stack.up()
        assert len(up_res.outputs) == 0
        assert up_res.summary.kind == "update"
        assert up_res.summary.result == "succeeded"

        facet_result = graphql_client._testing_facet_read(
            filter=FacetFilter(user_keys=["role"])
        )
        facet = one(facet_result.objects)

        result = graphql_client.class_read(
            filter=ClassFilter(facet=FacetFilter(user_keys=["role"]))
        )
        admin = one(result.objects).current
        assert admin is not None
        assert admin.dict() == {
            "user_key": "admin",
            "name": "Admin",
            "it_system": None,
            "facet": {"uuid": facet.uuid},
        }

        destroy_res = stack.destroy()
        assert destroy_res.summary.kind == "destroy"
        assert destroy_res.summary.result == "succeeded"

        result = graphql_client.class_read(
            filter=ClassFilter(facet=FacetFilter(user_keys=["role"]))
        )
        assert result.objects == []


@pytest.mark.integration_test
def test_class_with_itsystem(
    stack_builder: StackBuilder,
    mo_config_map: ConfigMap,
    graphql_client: GraphQLClient,
) -> None:
    result = graphql_client.class_read(
        filter=ClassFilter(facet=FacetFilter(user_keys=["role"]))
    )
    assert result.objects == []

    def pulumi_program() -> None:
        from more_itertools import one
        from pulumi import Config
        from pulumi import Output

        from pulumi_mo.autogenerated_graphql_client.input_types import FacetFilter
        from pulumi_mo.base import create_graphql_client_from_config
        from pulumi_mo.clazz import Class
        from pulumi_mo.clazz import ClassArgs
        from pulumi_mo.itsystem import ITSystem
        from pulumi_mo.itsystem import ITSystemArgs

        def fetch_role_facet() -> str:
            graphql_client = create_graphql_client_from_config(Config())
            with graphql_client as session:
                result = session._testing_facet_read(
                    filter=FacetFilter(user_keys=["role"])
                )
                facet = one(result.objects)
                return str(facet.uuid)

        role_id = Output.from_input(fetch_role_facet())
        suila = ITSystem("suila", ITSystemArgs("suila"))
        Class("admin", ClassArgs("admin", facet=role_id, itsystem=suila.id))

    with stack_builder(pulumi_program) as stack:
        stack.set_all_config(mo_config_map)

        up_res = stack.up()
        assert len(up_res.outputs) == 0
        assert up_res.summary.kind == "update"
        assert up_res.summary.result == "succeeded"

        facet_result = graphql_client._testing_facet_read(
            filter=FacetFilter(user_keys=["role"])
        )
        facet = one(facet_result.objects)

        result = graphql_client.class_read(
            filter=ClassFilter(facet=FacetFilter(user_keys=["role"]))
        )
        admin = one(result.objects).current
        assert admin is not None
        assert admin.dict() == {
            "user_key": "admin",
            "name": "Admin",
            "it_system": {"uuid": ANY},
            "facet": {"uuid": facet.uuid},
        }

        destroy_res = stack.destroy()
        assert destroy_res.summary.kind == "destroy"
        assert destroy_res.summary.result == "succeeded"

        result = graphql_client.class_read(
            filter=ClassFilter(facet=FacetFilter(user_keys=["role"]))
        )
        assert result.objects == []


@pytest.mark.integration_test
def test_person_urn(
    stack_builder: StackBuilder,
    mo_config_map: ConfigMap,
    project_name: str,
    stack_identifier: str,
) -> None:
    def pulumi_program() -> None:
        from more_itertools import one
        from pulumi import Config
        from pulumi import Output
        from pulumi import export

        from pulumi_mo.autogenerated_graphql_client.input_types import FacetFilter
        from pulumi_mo.base import create_graphql_client_from_config
        from pulumi_mo.clazz import Class
        from pulumi_mo.clazz import ClassArgs
        from pulumi_mo.itsystem import ITSystem
        from pulumi_mo.itsystem import ITSystemArgs

        def fetch_role_facet() -> str:
            graphql_client = create_graphql_client_from_config(Config())
            with graphql_client as session:
                result = session._testing_facet_read(
                    filter=FacetFilter(user_keys=["role"])
                )
                facet = one(result.objects)
                return str(facet.uuid)

        role_id = Output.from_input(fetch_role_facet())
        suila = ITSystem("suila", ITSystemArgs("suila"))
        admin = Class("admin", ClassArgs("admin", facet=role_id, itsystem=suila.id))

        export("id", admin.id)
        export("urn", admin.urn)

    with stack_builder(pulumi_program) as stack:
        stack.set_all_config(mo_config_map)

        up_res = stack.up()
        assert up_res.outputs.keys() == {"id", "urn"}
        UUID(up_res.outputs["id"].value)

        urn = up_res.outputs["urn"].value
        purn = parse_urn(urn)
        assert purn.urn_name == "admin"
        assert purn.pkg_name == "pulumi-python"
        assert purn.mod_name == "dynamic"
        assert purn.typ_name == "Class"

        assert (
            urn
            == f"urn:pulumi:{stack_identifier}::{project_name}::{purn.pkg_name}:{purn.mod_name}:{purn.typ_name}::{purn.urn_name}"
        )
