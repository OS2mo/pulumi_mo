# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import os
import random
import string
from collections.abc import Callable
from collections.abc import Iterator
from contextlib import AbstractContextManager
from contextlib import contextmanager

import pytest
from pulumi.automation import ConfigMap
from pulumi.automation import ConfigValue
from pulumi.automation import LocalWorkspaceOptions
from pulumi.automation import ProjectBackend
from pulumi.automation import ProjectSettings
from pulumi.automation import Stack
from pulumi.automation import create_stack
from pulumi.automation import fully_qualified_stack_name

from pulumi_mo.autogenerated_graphql_client.client import GraphQLClient
from pulumi_mo.base import create_graphql_client


def randomword(length: int) -> str:
    letters = string.ascii_lowercase
    return "".join(random.choice(letters) for _ in range(length))


@pytest.fixture
def project_name(request: pytest.FixtureRequest) -> str:
    testname = request.node.name
    assert isinstance(testname, str)
    return testname


@pytest.fixture
def stack_name(project_name: str) -> str:
    return fully_qualified_stack_name("organization", project_name, randomword(10))


@pytest.fixture(autouse=True)
def pulumi_config_passphrase(monkeypatch: pytest.MonkeyPatch) -> None:
    monkeypatch.setenv("PULUMI_CONFIG_PASSPHRASE", "hunter2")


StackBuilder = Callable[[Callable[[], None]], AbstractContextManager[Stack]]


@pytest.fixture
def stack_builder(project_name: str, stack_name: str) -> StackBuilder:
    @contextmanager
    def inner(pulumi_program: Callable[[], None]) -> Iterator[Stack]:
        stack = create_stack(
            stack_name=stack_name,
            project_name=project_name,
            program=pulumi_program,
            # Configure our backend storage to be the local filesystem
            # This is required to avoid having to run `pulumi login --local`
            opts=LocalWorkspaceOptions(
                project_settings=ProjectSettings(
                    name=project_name,
                    runtime="python",
                    backend=ProjectBackend(url="file://~"),
                )
            ),
        )
        yield stack
        stack.workspace.remove_stack(stack_name, force=True)

    return inner


@pytest.fixture
def mo_url() -> str:
    return os.environ.get("FASTRAMQPI__MO_URL", "http://localhost:5000")


@pytest.fixture
def mo_client_id() -> str:
    return os.environ.get("FASTRAMQPI__CLIENT_ID", "dipex")


@pytest.fixture
def mo_client_secret() -> str:
    return os.environ.get(
        "FASTRAMQPI__CLIENT_SECRET", "603f1c82-d012-4d04-9382-dbe659c533fb"
    )


@pytest.fixture
def mo_auth_server() -> str | None:
    return os.environ.get("FASTRAMQPI__AUTH_SERVER")


@pytest.fixture
def graphql_client(
    mo_url: str, mo_client_id: str, mo_client_secret: str, mo_auth_server: str | None
) -> Iterator[GraphQLClient]:
    graphql_client = create_graphql_client(
        mo_url, mo_client_id, mo_client_secret, mo_auth_server
    )
    with graphql_client as session:
        yield session


@pytest.fixture
def mo_config_map(
    mo_url: str, mo_client_id: str, mo_client_secret: str, mo_auth_server: str | None
) -> ConfigMap:
    config: ConfigMap = {
        "mora_base": ConfigValue(value=mo_url),
        "mora_client_id": ConfigValue(value=mo_client_id),
        "mora_client_secret": ConfigValue(value=mo_client_secret, secret=True),
    }
    if mo_auth_server:
        config["mora_auth_server"] = ConfigValue(value=mo_auth_server)
    return config
