# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from uuid import UUID

import pytest
from more_itertools import one
from pulumi.automation import ConfigMap
from pulumi.urn import _parse_urn as parse_urn

from pulumi_mo.autogenerated_graphql_client.client import GraphQLClient
from pulumi_mo.autogenerated_graphql_client.input_types import ITSystemFilter

from .conftest import StackBuilder


@pytest.mark.integration_test
def test_itsystem(
    stack_builder: StackBuilder,
    mo_config_map: ConfigMap,
    graphql_client: GraphQLClient,
) -> None:
    result = graphql_client.itsystem_read(filter=ITSystemFilter())
    assert result.objects == []

    def pulumi_program() -> None:
        from pulumi_mo.itsystem import ITSystem
        from pulumi_mo.itsystem import ITSystemArgs

        ITSystem("suila", ITSystemArgs("suila"))

    with stack_builder(pulumi_program) as stack:
        stack.set_all_config(mo_config_map)

        up_res = stack.up()
        assert len(up_res.outputs) == 0
        assert up_res.summary.kind == "update"
        assert up_res.summary.result == "succeeded"

        result = graphql_client.itsystem_read(filter=ITSystemFilter())
        suila = one(result.objects).current
        assert suila is not None
        assert suila.dict() == {"user_key": "suila", "name": "Suila"}

        destroy_res = stack.destroy()
        assert destroy_res.summary.kind == "destroy"
        assert destroy_res.summary.result == "succeeded"

        result = graphql_client.itsystem_read(filter=ITSystemFilter())
        assert result.objects == []


@pytest.mark.integration_test
def test_itsystem_urn(
    stack_builder: StackBuilder,
    mo_config_map: ConfigMap,
    project_name: str,
    stack_identifier: str,
) -> None:
    def pulumi_program() -> None:
        from pulumi import export

        from pulumi_mo.itsystem import ITSystem
        from pulumi_mo.itsystem import ITSystemArgs

        itsystem = ITSystem("suila", ITSystemArgs("suila"))

        export("id", itsystem.id)
        export("urn", itsystem.urn)

    with stack_builder(pulumi_program) as stack:
        stack.set_all_config(mo_config_map)

        up_res = stack.up()
        assert up_res.outputs.keys() == {"id", "urn"}
        UUID(up_res.outputs["id"].value)

        urn = up_res.outputs["urn"].value
        purn = parse_urn(urn)
        assert purn.urn_name == "suila"
        assert purn.pkg_name == "pulumi-python"
        assert purn.mod_name == "dynamic"
        assert purn.typ_name == "ITSystem"

        assert (
            urn
            == f"urn:pulumi:{stack_identifier}::{project_name}::{purn.pkg_name}:{purn.mod_name}:{purn.typ_name}::{purn.urn_name}"
        )
