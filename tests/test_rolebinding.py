# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from unittest.mock import ANY

import pytest
from more_itertools import one
from pulumi.automation import ConfigMap

from pulumi_mo.autogenerated_graphql_client.client import GraphQLClient
from pulumi_mo.autogenerated_graphql_client.input_types import RoleBindingFilter

from .conftest import StackBuilder


@pytest.mark.integration_test
def test_person(
    stack_builder: StackBuilder,
    mo_config_map: ConfigMap,
    graphql_client: GraphQLClient,
) -> None:
    result = graphql_client.rolebinding_read(filter=RoleBindingFilter())
    assert result.objects == []

    def pulumi_program() -> None:
        from more_itertools import one
        from pulumi import Config
        from pulumi import Output

        from pulumi_mo.autogenerated_graphql_client.input_types import FacetFilter
        from pulumi_mo.base import create_graphql_client_from_config
        from pulumi_mo.clazz import Class
        from pulumi_mo.clazz import ClassArgs
        from pulumi_mo.itsystem import ITSystem
        from pulumi_mo.itsystem import ITSystemArgs
        from pulumi_mo.ituser import ITUser
        from pulumi_mo.ituser import ITUserArgs
        from pulumi_mo.person import Person
        from pulumi_mo.person import PersonArgs
        from pulumi_mo.rolebinding import RoleBinding
        from pulumi_mo.rolebinding import RoleBindingArgs

        def fetch_role_facet() -> str:
            graphql_client = create_graphql_client_from_config(Config())
            with graphql_client as session:
                result = session._testing_facet_read(
                    filter=FacetFilter(user_keys=["role"])
                )
                facet = one(result.objects)
                return str(facet.uuid)

        role_id = Output.from_input(fetch_role_facet())

        admin = Class("admin", ClassArgs("admin", facet=role_id))
        alya = Person("alya", PersonArgs("Alya", "Shadowsong"))
        suila = ITSystem("suila", ITSystemArgs("suila"))
        ituser = ITUser("suila:alya", ITUserArgs("suila:alya", alya.id, suila.id))

        RoleBinding(
            "alya:suila:admin", RoleBindingArgs("alya:suila:admin", ituser.id, admin.id)
        )

    with stack_builder(pulumi_program) as stack:
        stack.set_all_config(mo_config_map)

        up_res = stack.up()
        assert len(up_res.outputs) == 0
        assert up_res.summary.kind == "update"
        assert up_res.summary.result == "succeeded"

        result = graphql_client.rolebinding_read(filter=RoleBindingFilter())
        rolebinding = one(result.objects).current
        assert rolebinding is not None
        assert rolebinding.dict() == {
            "user_key": "alya:suila:admin",
            "ituser": [{"uuid": ANY}],
            "role": [{"uuid": ANY}],
        }

        destroy_res = stack.destroy()
        assert destroy_res.summary.kind == "destroy"
        assert destroy_res.summary.result == "succeeded"

        result = graphql_client.rolebinding_read(filter=RoleBindingFilter())
        assert result.objects == []
